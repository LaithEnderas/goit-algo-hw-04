import random
import timeit

# алгоритм сортування злиттям
def merge_sort(arr):
    if len(arr) <= 1:
        return arr
    mid = len(arr) // 2
    left = merge_sort(arr[:mid])
    right = merge_sort(arr[mid:])
    return merge(left, right)

def merge(left, right):
    result = []
    i = j = 0
    while i < len(left) and j < len(right):
        if left[i] < right[j]:
            result.append(left[i])
            i += 1
        else:
            result.append(right[j])
            j += 1
    result.extend(left[i:])
    result.extend(right[j:])
    return result

# алгоритм сортування вставками
def insertion_sort(arr):
    arr = arr.copy()
    for i in range(1, len(arr)):
        key = arr[i]
        j = i - 1
        while j >= 0 and arr[j] > key:
            arr[j + 1] = arr[j]
            j -= 1
        arr[j + 1] = key
    return arr

# вбудований алгоритм Python (Timsort)
def timsort(arr):
    return sorted(arr)

# функція для вимірювання часу
def measure_time(func, data):
    return timeit.timeit(lambda: func(data), number=1)

def main():
    sizes = [100, 1000, 5000]
    print(f"{'N':<10} {'Merge':<15} {'Insertion':<15} {'Timsort':<15}")
    for n in sizes:
        data = [random.randint(0, 100000) for _ in range(n)]
        t_merge = measure_time(merge_sort, data)
        t_insert = measure_time(insertion_sort, data)
        t_tim = measure_time(timsort, data)
        print(f"{n:<10} {t_merge:<15.5f} {t_insert:<15.5f} {t_tim:<15.5f}")

if __name__ == "__main__":
    main()
